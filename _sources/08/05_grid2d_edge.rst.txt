.. _sec_sample_model_grid2d_edge:

``grid2d_edge``
=============================================

``grid_edge`` is a model that reads two dimensional structured grid,
and sends and receive values defined at edges.

It has two modes below:
* Global area: Flux at upstream edge is calculated from random number
* Internal area: Flux at upstream edge is received from global area

In the sample project, three regions are defined. "Region1" is the global area, "Region2" and "Region3" are the internal areas.
Flux at upstream edge is exchanged from "Region1" to "Region2" and "Region3".

``grid2d_edge`` is implemented in FORTRAN, C++ and Python. On this page FORTRAN version is explained.

``grid2d_edge``
--------------------------

:numref:`grid2d_edge_fortran_definition` shows "definition.xml" of ``grid2d_edge``, and
:numref:`grid2d_edge_fortran_main_f90` shows the source code of ``grid2d_edge``.

The important points are as follows:

* In :numref:`grid2d3d_fortran_definition`, two \<GridType\> element is defined. The first one with name"input" is for two dimensional grid, and the other one with name "output3d" is for three dimensional grid. It is important that the for \<GridType\> with name "output3d", attribute "post" is defined, and the value is "true". It means that the grid should not be created in Pre-processing window, but generated inside the model, and used only for post-processing.
* Output data is defined for both two dimensional grid and three dimensional grid. For two dimensional grid, the names are "outputNode2d", "outputCell2d", etc. For three dimensional grid, the names are "outputNode3d", "outputCell3d", etc.
* Time dependent input data is defined for both two dimensional grid and three dimensional grid. For two dimensional grid, the names are "inputNode2d", "inputCell2d", etc. For three dimensional grid, the names are "inputNode3d", "inputCell3d", etc.
* Line 95 of :numref:`grid2d3d_fortran_main_f90` calls :ref:`sec_ref_iRICMI_RIn_Grid3d_Coords_WithGridId`, to output the grid. The three dimensional grid is saved to Case1.cgn, and also sent to ``iricmi_server``. It is important that the value of the first argument is "output3d", that matches the name of grid type defined in :numref:`grid2d3d_fortran_definition`.
* Line 103 and 104 of :numref:`grid2d3d_fortran_main_f90` calls :ref:`sec_ref_iRICMI_ROut_Grid2d_Coords_WithGridId` and :ref:`sec_ref_iRICMI_ROut_Grid3d_Coords_WithGridId`. Calling these subroutines, the model passes the variables that stores the coordinates of the grid, and informs that the shape of the grids can change.

.. literalinclude:: ../../../../testmodels/grid2d_edge_fortran/definition.xml
   :name: grid2d_edge_fortran_definition
   :language: xml
   :linenos:
   :caption: definition.xml of ``grid2d_edge``

.. literalinclude:: ../../../../testmodels/grid2d_edge_fortran/main.f90
   :name: grid2d_edge_fortran_main_f90
   :language: fortran
   :linenos:
   :caption: source code main.f90 of ``grid2d_edge``

Project data
---------------

The project data to run ``grid2d_edge`` is stored in testdata/grid2d_edge_fortran folder.

:numref:`grid2d_edge_fortran_iricmi_project` shows iricmi_project.xml. You can see that
connections are defined to exchange data between three regions. Flux data is sent from "Region1" to "Region2" and "Region3".

:numref:`image_grid2d_edge_region1_input`, :numref:`image_grid2d_edge_region2_input`
and :numref:`image_grid2d_edge_region3_input` shows the shapes of grids.
* As shown in :numref:`image_grid2d_edge_region1_input`, the region of "Region2" and "Region3" are inside that of "Region1".
* The resolution (height and width of cell) of the grid of "Region1" is 0.1, and those of "Region2" and "Region3" are 0.05.

Please note that Delta T value is also different. For "Region1" Delta T is 1, and for "Region2" and "Region3" it is 0.5.

As explained in :ref:`sec_how_to_run_coupled`, you can run the models for the project, by "chdir"ing to the
project folder, and launch ``iricmi_run``.

.. literalinclude:: ../../../../testdata/grid2d_edge_fortran/iricmi_project.xml
   :name: grid2d_edge_fortran_iricmi_project
   :language: xml
   :linenos:
   :caption: iricmi_project.xml for ``grid2d_edge``

.. _image_grid2d_edge_region1_input:

.. figure:: images/grid2d_edge_region1_input.png

   The grid defined for "Region1"

.. _image_grid2d_edge_region2_input:

.. figure:: images/grid2d_edge_region2_input.png

   The grid defined for "Region2"

.. _image_grid2d_edge_region3_input:

.. figure:: images/grid2d_edge_region3_input.png

   The grid defined for "Region3"

Result
-----------

The screenshots to visualize the calculation result are shown from 
:numref:`image_grid2d_edge_region1_amount8` to :numref:`image_grid2d_edge_region3_amount60`.

From the screenshots, we can check the followings:
* "Region2" and "Region3" receive flux data at upstream edge from "Region1" so the amount data is exactly the same to "Region1".

.. _image_grid2d_edge_region1_amount8:

.. figure:: images/grid2d_edge_region1_amount8.png

   amount of "Region1" (t = 8)

.. _image_grid2d_edge_region1_amount16:

.. figure:: images/grid2d_edge_region1_amount16.png

   amount of "Region1" (t = 16)

.. _image_grid2d_edge_region1_amount60:

.. figure:: images/grid2d_edge_region1_amount60.png

   amount of "Region1" (t = 60)

.. _image_grid2d_edge_region2_amount16:

.. figure:: images/grid2d_edge_region2_amount16.png

   amount of "Region2" (t = 16)

.. _image_grid2d_edge_region2_amount60:

.. figure:: images/grid2d_edge_region2_amount60.png

   amount of "Region2" (t = 60)

.. _image_grid2d_edge_region3_amount60:

.. figure:: images/grid2d_edge_region3_amount60.png

   amount of "Region3" (t = 60)
